alias functionNum R1;
alias pid R2;		
alias blockNum R4;

print "MOD4";
if(functionNum == 3) then
	alias word R3;
	multipush (R0, R1, R2, R3, R4);
	R1 = 8;
	R2 = [SYSTEM_STATUS_TABLE +CORE*5+ 1];
	call MOD_0;
	multipop (R0, R1, R2, R3, R4);
	
	//breakpoint;
	print word;

	multipush (R0, R1, R2, R3, R4);
	R1 = 9;
	R2 = [SYSTEM_STATUS_TABLE + CORE*5+1];
	call MOD_0;		//returns a value -1 or 0 for terminal release
	multipop (R0, R1, R2, R3, R4);
	return;
endif;







if(functionNum == 4) then
	alias wordStoreAddress R3;
	multipush (R0, R1, R2, R3, R4);
	R1 = 8;
	R2 = [SYSTEM_STATUS_TABLE +CORE*5+ 1];
	call MOD_0;		
	multipop (R0, R1, R2, R3, R4);
	
	//breakpoint;	
	read;
	//breakpoint;

	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE +CORE*5+ 1]*16 + 4] = WAIT_TERMINAL;

		backup;
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
		R3 = "MOD4";
        call ACCESS_CONTROL;
        restore;

        backup;
        call CONTEXT_SWITCH;
        restore;

        backup;
        R1 = ACQUIRE_KERN_LOCK;
		R2 = KERN_LOCK;
		R3 = "M4";
        call ACCESS_CONTROL;
        restore;


	[[PTBR + 2*(wordStoreAddress/512)]*512 + (wordStoreAddress % 512)] = [PROCESS_TABLE + pid*16 + 8];		//converting logical store addr to physical and storing data present in inputbuffer there

	return;

endif;







if(functionNum == DISK_LOAD) then
	alias pageNum R3;

	multipush(R0, R1, R2, R3, R4);		//Accquiring DISK
	R1 = ACQUIRE_DISK;
	R2 = [SYSTEM_STATUS_TABLE + CORE*5+1];		//REDUNDANT!!! as R2 itself is currPID
	call MOD_0;
	multipop(R0, R1, R2, R3, R4);

	[DISK_STATUS_TABLE + 1] = 0;		//0 for DISK_LOAD (and NOT WRITE)
	[DISK_STATUS_TABLE + 2] = pageNum;
	[DISK_STATUS_TABLE + 3] = blockNum;

	load(pageNum, blockNum);
	
	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE +CORE*5+ 1] + 4] = WAIT_DISK;
	backup;
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
		R3 = "M4";
        call ACCESS_CONTROL;
        restore;

        backup;
        call CONTEXT_SWITCH;
        restore;

        backup;
        R1 = ACQUIRE_KERN_LOCK;
		R2 = KERN_LOCK;
		R3 = "M4";
        call ACCESS_CONTROL;
        restore;


	return;
endif;









if(functionNum == DISK_STORE) then
	alias pageNum R3;

	multipush(R0, R1, R2, R3, R4);		//Accquiring DISK
	R1 = ACQUIRE_DISK;
	R2 = [SYSTEM_STATUS_TABLE +CORE*5+ 1];		//REDUNDANT!!! as R2 itself is currPID
	call MOD_0;
	multipop(R0, R1, R2, R3, R4);

	[DISK_STATUS_TABLE + 1] = 1;		//1 for DISK_STORE (and NOT LOAD)
	[DISK_STATUS_TABLE + 2] = pageNum;
	[DISK_STATUS_TABLE + 3] = blockNum;

	store(pageNum, blockNum);
	
	[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE +CORE*5 +1] + 4] = WAIT_DISK;
	backup;
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
		R3 = "M4";
        call ACCESS_CONTROL;
        restore;

        backup;
        call CONTEXT_SWITCH;
        restore;

        backup;
        R1 = ACQUIRE_KERN_LOCK;
		R2 = KERN_LOCK;
		R3 = "M4";
        call ACCESS_CONTROL;
        restore;

	//print "store done";
	return;
endif;