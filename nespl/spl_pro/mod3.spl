alias functionNum R1;
alias arg1 R2;
alias arg2 R3;
alias arg3 R4;
alias ret R0;

// =================================================open==================================================
// ------------------------------one arg that is filename--------------------------
//locates the file in the inode table and makes an entry in the open file table. returns open file index or an error code; the file status entry is incremented on successful entry
print("in mod3");
//--------------------OPEN(file)---------------------
if(functionNum == OPEN) then
	alias fileName R2;		//passed as arg yo OPEN
	alias inodee R3;	//NOT passed as arg to OPEN
	alias tmp R4;
	alias i R5;
	alias openee R6;

	inodee = 0;
	while(inodee < MAX_FILE_NUM) do
		if([INODE_TABLE + 16*inodee + 1] == fileName) then
			break;
		endif;
	inodee = inodee + 1;
	endwhile;

	if(inodee == MAX_FILE_NUM) then
		R0 = -1;
		return;
	else
		multipush(R0, R1, R2, R3, R4, R5, R6);
		R1 = ACQUIRE_INODE;
		R2 = inodee;		//ACQUIRING INDOE
		R3 = [SYSTEM_STATUS_TABLE +CORE*5+ 1];
		call MOD_0;
		multipop(R1, R2, R3, R4, R5, R6);
		tmp = R0;
		multipop(R0);

		if(tmp == -1) then	//if ACQUIRE_INDOE returned with error
			R0 = -1;
			return;
		else			//if INODE ACQUIRED SUCCESSFULLY
			if([INODE_TABLE + 16*inodee + 0] == EXEC) then	//if file to open is EXEC
				
				backup;
				R1 = RELEASE_INODE;
				R2 = inodee;		//releasing the INODE
				R3 = [SYSTEM_STATUS_TABLE +CORE*5+ 1];
				call MOD_0;
				restore;

				R0 = -1;
				return;
			else			//if file to open is DATA or ROOT

				i = 0;
				while(i < MAX_OPENFILE_NUM) do
					if([OPEN_FILE_TABLE + 4*i + 0] == -1) then
						break;
					endif;
				i = i + 1;
				endwhile;

				if(i == MAX_OPENFILE_NUM) then

					backup;
					R1 = RELEASE_INODE;
					R2 = inodee;         //releasing the INODE
                    R3 = [SYSTEM_STATUS_TABLE + CORE*5+1];
					call MOD_0;
					restore;

					R0 = -2;	//returing -2 if already MAX_NUM of open file present in system
                                	return;

				else
					openee = OPEN_FILE_TABLE + 4*i;
					
					if(fileName == "root") then
						[openee + 0] = INODE_ROOT;
					else
						[openee + 0] = inodee;
						
						if([FILE_STATUS_TABLE + 4*inodee + 1] == -1) then
							[FILE_STATUS_TABLE + 4*inodee + 1] = 1;
						else
							[FILE_STATUS_TABLE + 4*inodee + 1] = [FILE_STATUS_TABLE + 4*inodee + 1] + 1;
						endif;
					endif;

					[openee + 1] = 1;	//initializing OPN_INSTANCE_CNT to 1
					[openee + 2] = 0;	//initializing LSEEK to 0

					backup;
                                        R1 = RELEASE_INODE;
                                        R2 = inodee;         //releasing the INODE
                                        R3 = [SYSTEM_STATUS_TABLE +CORE*5+ 1];
                                        call MOD_0;
                                        restore;

					R0 = (openee - OPEN_FILE_TABLE)/4;	//retunring open_file_table_index upon success
					return;
				endif;

			endif;
		endif;
	endif;
endif;

// ======================================================close ==============================================================
//---------------------------------------------File Table Index is arg --------------------------
if(functionNum == CLOSE) then
    alias filename R7;
    alias inodei R3;
    alias inodee R9;
    alias openfilei R2;
    alias openfilee R4;
    alias fstate R12;
    alias openfiles R13;
    alias openfileinstance R14;

    openfilee = OPEN_FILE_TABLE + openfilei*4;

    inodei = [openfilee + 0];
    inodee = OPEN_FILE_TABLE + openfilei*4;

    //---------------------file open count in the file inode status table ----------------------------------
    fstate = FILE_STATUS_TABLE + inodei*4;
    openfiles = [fstate + 1];

    //----------------------DECREASE THE COUNT IN THE OPEN FILE TABLE-----------------------------------------
    openfileinstance = [openfilee + 1];
    openfileinstance = openfileinstance - 1;
    //---------------------------------------------------------------------------------------------------------

    //---------------------------------if the instance is closed-------------------------------------------
    if(openfileinstance == 0) then 
        [openfilee] = -1;
        [openfilee + 1] = -1;
        [openfilee + 2] = -1;
        [openfilee + 3] = -1;

        // decrement the open instance 
        if([inodee + 1] != "root") then
            openfiles = openfiles -1;
        endif;
            if(openfiles == 0) then
                openfiles = -1;
            endif;
    endif;
    return;
endif;

// ----------------------------------------------------close is done---------------------------------------------------------
// =====================================================Buffered read =======================================================
// 1. disk block number 2. offset value 3. physical mem add-------------------------------------
//read a word at position specified by the offset within the given disk block and store it into the given physical memory address

if(functionNum == BUFFERED_READ || functionNum == BUFFERED_WRITE ) then 
    //print("inwrite2");
    alias dest R4;
    alias disk R2;
    alias offset R3;
    alias buf R5;
    alias pid R10;
    alias bte R11; // buffer table entry
    alias bp R12; //buffer page
    
    buf = disk %4;
    pid = [SYSTEM_STATUS_TABLE +CORE*5+ 1];
    //breakpoint;
    //---------- Acquire the buffer by calling the Acquire_Buffer() function in the Resource Manager module;
    //print("here2");
    //print(arg3);
    backup;
    R1 = ACQUIRE_BUFFER;
    R2 = buf; 
    R3 = pid;
    call RESOURCE_MANAGER;
    //multipop(R5, R6, R7, R8, R9);
    restore;
    //print("here22");
    // if the buffer contains a different disk block
    // first get the buffer table

   

    bte = BUFFER_TABLE + buf*4;
    bp = (BUFFER/512) + buf;
    //Since all the 4 buffer pages are shared by all the files in the file system, a buffer page may be required to be replaced by another disk block. In this case, write-back is performed only if the page is modified. The dirty bit indicates whether the page has been modified.
    //print("vv");
    if([bte] != disk) then
        // ----------------------------checking if it is dirty --------------------------------------------
        if([bte+1] == 1) then 
            //multipush(R5, R6, R7, R8, R9, R10, R11,R15);
            backup;
            R1 = DISK_STORE;
            R2 = [SYSTEM_STATUS_TABLE+CORE*5+1];
            R3 = bp;      //page number
            R4 = [bte];  //block num
            call DEVICE_MANAGER;
            restore;
            [bte] = -1;
            [bte+1] = 0;
            //multipop(R5, R6, R7, R8, R9, R10, R11,R15);
        endif;
        // load a new disk now
        //multipush(R5, R6, R7, R8, R9, R10, R11,R15);
        backup;
        R1 = DISK_LOAD;
        R4 = disk;
        R2 = pid;
        R3 = bp;
        
        call DEVICE_MANAGER;
        restore;
        //multipop(R5, R6, R7, R8, R9, R10, R11,R15);
        [bte] = disk;
    endif;
    //print("aa");
    //print(functionNum);
    if (functionNum == BUFFERED_READ ) then
        [dest] = [BUFFER + buf*512 + offset];
    endif;
    //print("ddd");
    //print(dest);
    if(functionNum == BUFFERED_WRITE ) then
        [BUFFER+buf*512 + offset] = dest;
        //print("aan");
        [bte+1] = 1;
       // breakpoint;
    endif;
    R1 = RELEASE_BUFFER;
    R2 = buf;
    R3 = pid;
    call RESOURCE_MANAGER;
    return;
endif;
