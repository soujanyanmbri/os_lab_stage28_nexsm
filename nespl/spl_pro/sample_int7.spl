// set the mode to syscall 5
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5;
//print ("entered int7");
// save the usersp
alias userSP R0;
userSP = SP;
//save sp in the usersp of PROCESS_TABLE
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
// Setting SP to UArea Page number * 512 - 1 (start of the kernel)
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

// this is for address translation 
// userSp - 4 = location of arg1 which is the logical address - file fileDescPhysicalAddr
// filedescriptor = stuff at that physical address

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];
if (fileDescriptor != -2)
then
    // code isnt valid
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = -1;
else
    alias word R5;
    word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
    //print word;
    multipush(R0, R1, R2);
    R1 = TERMINAL_WRITE;
    R2 = [SYSTEM_STATUS_TABLE+1];
    R3 = word;
    call MOD_4;
    multipop(R0, R1, R2);
    alias physicalAddrRetVal R6;
    physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
    [physicalAddrRetVal] = 0;
endif;

SP = userSP;
// set mode flag to 0 again
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
ireturn;
