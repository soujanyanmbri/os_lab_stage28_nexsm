//======================================INTERRUPT- 7 WRITE CODE =====================================================================
// ---------------R0 - R7: global variables
// ---------------R12-R15: for functions. 
//----------------arguments are: file desc and the word to be written into the file ------------
// ------------Write fails if the LSEEK value exceeds 2047.

alias lseek R8;
alias fdesc R9;
alias word R10;
alias pid R11;
alias pcb R12;
alias usp R6;
alias ret R7;


alias rest R1;
alias reste R2;
alias opent R3;
alias opente R4;
alias inode R5;
alias inodee R13;

//print "int7";
pid = [SYSTEM_STATUS_TABLE+1+CORE*5];
pcb = PROCESS_TABLE+16*pid;
usp = SP;

//--------------switching to the kernel stack ----------------------------------
[pcb + 13] = SP;
SP = [pcb+11]*512 -1;

// ------------------------fetch the arguments ----------------------------
fdesc = [[PTBR + 2*((usp-4)/512)]*512 + (usp-4)%512];
word = [PTBR +2*((usp-3)/512)]*512 + ((usp-3)%512);
ret = [PTBR + 2*((usp-1)/512)]*512 + ((usp-1)%512);

backup;
    R1 = ACQUIRE_KERN_LOCK;
    call ACCESS_CONTROL;
restore;

//--------------done fetching the args -----------------------------
//print("fdescis");
//print(fdesc);
if(fdesc != -2) then
    //print("a");
    // check if the fdesc is valid
    if(fdesc < 0 || fdesc > 7) then 
        print("fdesc not valid");
        [ret] = -1;
        
        backup;
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        restore;
        
        [pcb+9] = 0;
        SP = usp;

        ireturn;
    // if the fdesc is valid then
    else
        rest = [pcb+ 11]*512 + RESOURCE_TABLE_OFFSET;
        reste = rest + fdesc*2;
        if([reste] != FILE) then
            print("notfile");
            breakpoint;
            [ret] = -1;
            
            backup;
            R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            restore;

            SP = usp;
            [pcb+9] = 0;

            ireturn;
        endif;

        // ----------------get the corresponding open entries ---------------------------
    // check if the file is open
        opent = OPEN_FILE_TABLE + [reste+1]*4;
        inode = [opent];
        inodee = INODE_TABLE + inode*16;

        // -----------------check the process table entry---------------------------
        // ------------------if the current user isnt root or doesnt own file or exclusive then return -3 ---------------------
        // ------------------ROOT is the constant (userid) -----------------------------
        //print("breakhere");
        //breakpoint;
        if([pcb+3 ] != ROOT &&[inodee + 3] !=[pcb+3] && [inodee+4] == EXCLUSIVE) then 
            [ret] = -3;
            
            backup;
            R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            restore;

            SP = [pcb+13];
            [pcb+9] = 0;

            ireturn;
        endif;
        //print("b");
        // -------------------acquire inode ----------------------------------
        multipush ( R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12,R13);
        R1 = ACQUIRE_INODE;
        R2 = inode;
        R3 = pid;
        call RESOURCE_MANAGER;
        multipop (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13);
        //print("c");
        // ----------------check if ACQUIRE_INODE fails ---------------------
        if(R0 == -1) then
            [ret] = -1;
            
            
            backup;
            R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            restore;

            SP = [pcb+13];
            [pcb+9] = 0;

            ireturn;
        endif;

        lseek = opent + 2 ;
        // ---------------check if the file is maxed out -------------------
        if([lseek ] == MAX_FILE_SIZE ) then
            [ret] = -2;
            backup;
		    R1 = RELEASE_INODE;
            R2 = inode;
            R3 = RELEASE_INODE;
            call RESOURCE_MANAGER;
            restore;
            
            backup;
            R1 = RELEASE_LOCK;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            restore;

            [ pcb + 9 ] = 0;
            SP = [pcb+13];

            ireturn;
        endif;
        
        //print("d");
        //----------------if the current block is full, then get a new block must be allocated -----------------
        if([lseek] == [inodee+2] && [lseek]%512 == 0) then
            multipush (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15);
			R1 = GET_FREE_BLOCK;
			call MEMORY_MANAGER;
			multipop (R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12,R13, R14, R15);
            if(R0 < 0) then
                [ret] = -2;
                backup;
                R1 = RELEASE_INODE;
                R2 = inode;
                R3 = RELEASE_INODE;
                call RESOURCE_MANAGER;
                restore;
                
                backup;
                R1 = RELEASE_LOCK;
                R2 = KERN_LOCK;
                call ACCESS_CONTROL;
                restore;
                
                [ pcb + 9 ] = 0;
                SP = [pcb+13];

                ireturn;
            endif;
            // assign the new block now
            [inodee + 8 + ([lseek]/512)] = R0;
        endif;
        //print("e");
        //print([word]);
        R15 = [word];
        backup;
            R1 = BUFFERED_WRITE;
            R2 = [inodee + 8 + ([lseek]/512) ];
            R3 = [lseek]%512; //offset
            R4 = [word];
            call FILE_MANAGER;
        restore;
        //print("f");
        if([lseek] == [inodee+2] ) then
            [inodee+2] = [inodee+2] +1;
            //[ROOT_FILE + 8*inode + 1] = [ROOT_FILE + 8*inode + 1] + 1;
        endif;
        [lseek] = [lseek] + 1;
        [ret] = 0;
        backup;
		    R1 = RELEASE_INODE;
            R2 = inode;
            R3 = pid;
            call RESOURCE_MANAGER;
        restore;
        //print("g");
        
        backup;
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        restore;

        [ pcb + 9 ] = 0;
        SP = [pcb+13];

        ireturn;

    endif;
else
    backup; 
    R1 = TERMINAL_WRITE;
    R2 = [SYSTEM_STATUS_TABLE+CORE*5+1];
    R3 = [word];
    call DEVICE_MANAGER;
    restore;
    [ret] = 0;
   // print("here?");
    backup;
        R1 = RELEASE_LOCK;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        restore;
    SP = usp;
    [pcb + 9] = 0;
    ireturn;
endif;








