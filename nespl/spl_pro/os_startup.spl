//library
//loadi(63,13);
//loadi(64,14);

//Module 7: Boot module
loadi(54, 67);
loadi(55, 68);

//idle
loadi(69,11);
loadi(70,12);

//timer
//loadi(4,17);
//loadi(5,18);

//loading init program from disk blocks 7,8 to pages 65,66 in memory
loadi(65,7);
loadi(66,8);

//loading INT 10 module from disk to memory
//loadi(22,35);
//loadi(23,36);

//LOADING INT7 from disk memory
//loadi(16,29);
//loadi(17,30);


//loading exceptional handler routine
//loadi(2, 15);
//loadi(3, 16);

///////////////////Calling BOOT MODULE

SP= 82*512-1;  //sets up stack for boot module
call BOOT_MODULE;
///////////////////////IDLE

PTBR = PAGE_TABLE_BASE;
PTLR = 10; 

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

//process tabble

[PROCESS_TABLE+1] = 0; //PID 
[PROCESS_TABLE+4] =RUNNING;  // STATE = RUNNING
[PROCESS_TABLE+11] =82; //user area page
[PROCESS_TABLE +12] = 0; //KPTR
[PROCESS_TABLE + 13] = 8*512; //UPTR
[PROCESS_TABLE +14] = PTBR;   //PTBR
[PROCESS_TABLE +15] = 10;     //PTLR

//Entry point - stack to the entry point
[81*512] = [69*512 +1];


//SYSTEM STATUS TABLE

[SYSTEM_STATUS_TABLE +1] = 0; //PID OF CURRENTLY EXCECUTING PROCESS IS MAINTAINED

//[76*512] = [65 * 512 + 1]; //adress of second word in header, stored at top of user stack

SP = 8*512;

ireturn;