alias functionnum R1;
alias pid R2;
print "IN MOD1";
print R1;

if(functionnum==FREE_USER_AREA_PAGE) then
	alias pid R10;
	alias arg1 R2;
    alias pte R11;
    alias rest R15;
    alias reste R13;
    alias i R14;
    pid = [SYSTEM_STATUS_TABLE+CORE*5+1];
    alias upage R12;
    pid = arg1;
    pte = PROCESS_TABLE+pid*16;
    upage = [pte+11];

    // -----------------------------close the open files and do stuff---------------------------------
    rest = upage*512 + RESOURCE_TABLE_OFFSET;
    i = 0;
    while(i < 8) do 
        reste = rest + i*2;

        // ----------------------------close all semaphores ------------------------------
        if([reste] == SEMAPHORE) then
            multipush(R10,R11, R12, R13, R14,R15);
            R1 = RELEASE_SEMAPHORE;
            R2 = [reste + 1];
            R3 = pid;
            call RESOURCE_MANAGER;
            multipop(R10,R11, R12, R13, R14,R15);
        endif;
        // --------------------------close all files -------------------------------------
        if([reste] ==FILE) then
            multipush(R10,R11, R12, R13, R14,R15);
            R1 = CLOSE;
            R2 = [reste + 1];
            R3 = pid;
            call FILE_MANAGER;
            multipop(R10,R11, R12, R13, R14,R15);
        endif;
        i = i+1;
    endwhile;

    R1 = RELEASE_PAGE;
    R2 = upage;
    call MEMORY_MANAGER;
    return;

endif;



//----------------------EXIT_PROCESS-----------------------
if(functionnum == EXIT_PROCESS) then
	alias i R3;

	if([PROCESS_TABLE + 16*pid + 9] != 9) then
		i = 0;
		while(i < MAX_PROC_NUM) do
			if([PROCESS_TABLE + 16*i + 4] == WAIT_PROCESS  &&  [PROCESS_TABLE + 16*i + 5] == pid) then
				[PROCESS_TABLE + 16*i + 4] = READY;
			endif;

			if([PROCESS_TABLE + 16*i + 2] == pid) then
				[PROCESS_TABLE + 16*i + 2] = -1;
			endif;
		i = i + 1;
		endwhile;
	endif;


	multipush(R0, R1, R2, R3, R4);		
	R1 = FREE_PAGE_TABLE;
	R2 = pid;		
	call MOD_1;
	multipop(R0, R1, R2, R3, R4);

	multipush(R0, R1, R2, R3, R4);		
	R1 = FREE_USER_AREA_PAGE;
	R2 = pid;	
	call MOD_1;
	multipop(R0, R1, R2, R3, R4);
	
	[PROCESS_TABLE + pid*16 + 4] = TERMINATED;
	
	return;
endif;






//----------------------FREE_PAGE_TABLE--------------------------
if(functionnum == FREE_PAGE_TABLE) then
	alias i R3;
	alias tmp R4;
	alias PTB R5;

	PTB = PAGE_TABLE_BASE + 20*pid;		//!!!!!!!>>>>ALERT<<<<!!!!! not sure if this always works
	
	[PTB + 0] = -1;		//just invalidating entries of LIB page and not freeing them as always need to be in MEM even if no process is using it currently
	[PTB + 1] = "0000";
	[PTB + 2] = -1;
	[PTB + 3] = "0000";

	i = 2;		//invalidating PAGE_TABLE entries and freeing corresponding pages
	while(i<10) do
		if([PTB + (i*2)] != -1) then
			multipush(R0, R1, R2, R3, R5);
			R1 = RELEASE_PAGE;
			R2 = [PTB + i*2];
			call MOD_2;
			multipop(R0, R1, R2, R3, R5);
		endif;
		[PTB + i*2] = -1;
		[PTB + i*2 + 1] = "0000";
	i = i + 1;
	endwhile;

	//invalidating DISK_MAP_TAB and RELEASE_BLOCKS for STACK and HEAP
	i=0;
	while(i<10) do
		if(([DISK_MAP_TABLE + 10*pid + i] != -1) && (i==2 || i==3 || i==8 || i==9)) then
			backup;		
			R1 = RELEASE_BLOCK;
			tmp = i;
			R3 = pid;		
			R2 = [DISK_MAP_TABLE + 10*pid + tmp];		//blockNum
			call MOD_2;	
			restore;	
		endif;

		[DISK_MAP_TABLE + 10*pid + i] = -1;		
	i = i + 1;
	endwhile;

	return;
endif;







//-----------------------------------------GET_PCB_ENTRY-----------------------------------------
if(functionnum == GET_PCB_ENTRY) then
	alias i R3;
	i = 0;
	while(i<16) do
		if([PROCESS_TABLE + 16*i + 4] == TERMINATED) then
			[PROCESS_TABLE + 16*i + 4] = ALLOCATED;
			[PROCESS_TABLE + 16*i + 1] = i; 
			[PROCESS_TABLE + 16*i + 14] = PAGE_TABLE_BASE + 20*i;
			[PROCESS_TABLE + 16*i + 15] = 10;
			R0 = i; 
			return;
		endif;
	i = i + 1;
	endwhile;
	R0 = -1;	
	return;
endif;







//--------------------------------------------KILL_ALL--------------------------------------------
if(functionnum == KILL_ALL) then
	alias i R4;

	i = 0;
	while(i < MAX_FILE_NUM) do    //Lock all files to ensure that no processes are in the middle of a file operation 
		if([INODE_TABLE + 16*i + 1] != -1) then
			backup;
			R1 = ACQUIRE_INODE;
			R3 = pid;
			R2 = i;
			call MOD_0;
			restore;
		endif;
	i = i + 1;
	endwhile;


	i = 3;	
	while(i <  (MAX_PROC_NUM-2)) do		
		if(([PROCESS_TABLE + 16*i + 4] != TERMINATED) && (i != pid)) then
			backup;
			R1 = EXIT_PROCESS;
			R2 = i;
			call MOD_1;
			restore;
		endif;

	i = i + 1;
	endwhile;



	i = 0;
	while(i < MAX_FILE_NUM) do    //release inode lock of all file s acquired before 
		if([INODE_TABLE + 16*i + 1] != -1) then
			backup;
			R1 = RELEASE_INODE;
			R3 = pid;
			R2 = i;
			call MOD_0;
			restore;
		endif;
	i = i + 1;
	endwhile;


	return;

endif;