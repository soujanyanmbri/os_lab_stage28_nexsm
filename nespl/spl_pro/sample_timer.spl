[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
print (SP);
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
print(SP);
backup;
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE +1];
print (currentPID);
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
//Save KPTR,PTBR and PTLR values to the process table of the current process

[process_table_entry + 12] = SP % 512;//KPTR offset is saved so that we can reallocate the user Page if necessary.
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

[process_table_entry + 4] = READY;

alias newPID R2;
if(currentPID == 0) then
	newPID = 1;
    print("HERE1");
else
	newPID = 0;
    print("HERE2");
endif;
//Restore SP,PTBR,PTLR values "from" the process table entry for the new process

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;
//thus if state is in  CREATED, set SP to the top of the user stack.
if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	print("HERE3");
	print (newPID);
	SP = [new_process_table + 13];
	ireturn;
endif;
//Set the newly found process state  to RUNNING

[new_process_table + 4] = RUNNING;
restore;
SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
ireturn;